{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","waveText","setWaveText","mining","setMining","ethereum","window","contractAddress","contractABI","WavePortalContract","abi","signer","ethers","providers","Web3Provider","getSigner","wavePortalContract","Contract","checkIfWalletIsConnected","a","console","log","request","method","accounts","length","account","connectWallet","alert","getAllWaves","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","gasLimit","waveTxn","hash","wait","useEffect","initialCheck","onNewWave","from","warn","prevState","on","off","className","type","value","onChange","event","target","style","width","marginLeft","marginTop","marginBottom","borderLeft","borderTop","borderRight","disabled","onClick","map","index","backgroundColor","padding","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.794fe6a3.chunk.js","sourcesContent":["import { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport WavePortalContract from \"./utils/WavePortal.json\";\n\nfunction App() {\n\tconst [currentAccount, setCurrentAccount] = useState(\"\");\n\tconst [allWaves, setAllWaves] = useState([]);\n\tconst [waveText, setWaveText] = useState(\"\");\n\tconst [mining, setMining] = useState(false);\n\tconst { ethereum } = window;\n\tconst contractAddress = \"0xd63aBff74143f24f5a7A2156c205c36D94dCc7c5\";\n\tconst contractABI = WavePortalContract.abi;\n\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\tconst signer = provider.getSigner();\n\tconst wavePortalContract = new ethers.Contract(\n\t\tcontractAddress,\n\t\tcontractABI,\n\t\tsigner\n\t);\n\n\tconst checkIfWalletIsConnected = async () => {\n\t\ttry {\n\t\t\tif (!ethereum) {\n\t\t\t\tconsole.log(\"Make sure you have metamask!\");\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tconsole.log(\"We have the ethereum object\", ethereum);\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n\t\t\tif (accounts.length !== 0) {\n\t\t\t\tconst account = accounts[0];\n\t\t\t\tconsole.log(\"Found an authorized account:\", account);\n\t\t\t\tsetCurrentAccount(account);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"No authorized account found\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tif (!ethereum) {\n\t\t\t\talert(\"Get MetaMask!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({\n\t\t\t\tmethod: \"eth_requestAccounts\",\n\t\t\t});\n\n\t\t\tconsole.log(\"Connected\", accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst getAllWaves = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\t\tif (ethereum) {\n\t\t\t\tconst waves = await wavePortalContract.getAllWaves();\n\n\t\t\t\t/*\n\t\t\t\t * We only need address, timestamp, and message in our UI so let's\n\t\t\t\t * pick those out\n\t\t\t\t */\n\t\t\t\tlet wavesCleaned = [];\n\t\t\t\twaves.forEach((wave) => {\n\t\t\t\t\twavesCleaned.push({\n\t\t\t\t\t\taddress: wave.waver,\n\t\t\t\t\t\ttimestamp: new Date(wave.timestamp * 1000),\n\t\t\t\t\t\tmessage: wave.message,\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t/*\n\t\t\t\t * Store our data in React State\n\t\t\t\t */\n\t\t\t\tsetAllWaves(wavesCleaned);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst wave = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\tsetMining(true);\n\t\t\t\tconst waveTxn = await wavePortalContract.wave(waveText, {\n\t\t\t\t\tgasLimit: 300000,\n\t\t\t\t});\n\t\t\t\tconsole.log(\"Mining...\", waveTxn.hash);\n\t\t\t\tsetWaveText(\"\");\n\n\t\t\t\tawait waveTxn.wait();\n\t\t\t\tconsole.log(\"Mined -- \", waveTxn.hash);\n\t\t\t\tsetMining(false);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tsetMining(false);\n\t\t\tsetWaveText(\"\");\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst handleTextChange = (event) => setWaveText(event.target.value);\n\n\tuseEffect(() => {\n\t\tconst initialCheck = async () => {\n\t\t\tawait checkIfWalletIsConnected();\n\t\t\tawait getAllWaves();\n\t\t};\n\n\t\tinitialCheck();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tlet wavePortalContract;\n\n\t\tconst onNewWave = (from, timestamp, message) => {\n\t\t\tconsole.warn(\"NewWave\", from, timestamp, message);\n\t\t\tsetAllWaves((prevState) => [\n\t\t\t\t...prevState,\n\t\t\t\t{\n\t\t\t\t\taddress: from,\n\t\t\t\t\ttimestamp: new Date(timestamp * 1000),\n\t\t\t\t\tmessage: message,\n\t\t\t\t},\n\t\t\t]);\n\t\t};\n\n\t\tif (window.ethereum) {\n\t\t\twavePortalContract = new ethers.Contract(\n\t\t\t\tcontractAddress,\n\t\t\t\tcontractABI,\n\t\t\t\tsigner\n\t\t\t);\n\t\t\twavePortalContract.on(\"NewWave\", onNewWave);\n\t\t}\n\n\t\treturn () => {\n\t\t\tif (wavePortalContract) {\n\t\t\t\twavePortalContract.off(\"NewWave\", onNewWave);\n\t\t\t}\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<div className=\"mainContainer\">\n\t\t\t<div className=\"dataContainer\">\n\t\t\t\t<div className=\"header\">ðŸ‘‹ Hey there, its simple Wave Portal!</div>\n\n\t\t\t\t<div className=\"bio\">\n\t\t\t\t\tHello I am Bartek. Connect your Ethereum wallet and wave at me!\n\t\t\t\t</div>\n\n\t\t\t\t<label>\n\t\t\t\t\tType your name:\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={waveText}\n\t\t\t\t\t\tonChange={handleTextChange}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: \"50%\",\n\t\t\t\t\t\t\tmarginLeft: \"8px\",\n\t\t\t\t\t\t\tmarginTop: \"24px\",\n\t\t\t\t\t\t\tmarginBottom: \"12px\",\n\t\t\t\t\t\t\tborderLeft: \"0px\",\n\t\t\t\t\t\t\tborderTop: \"0px\",\n\t\t\t\t\t\t\tborderRight: \"0px\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"waveButton\"\n\t\t\t\t\tdisabled={waveText.length < 2}\n\t\t\t\t\tonClick={wave}\n\t\t\t\t>\n\t\t\t\t\tWave at Me\n\t\t\t\t</button>\n\n\t\t\t\t{!currentAccount && (\n\t\t\t\t\t<button className=\"waveButton\" onClick={connectWallet}>\n\t\t\t\t\t\tConnect Wallet\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\n\t\t\t\t{mining ? (\n\t\t\t\t\t<p>Total waves: Mining... Please wait</p>\n\t\t\t\t) : (\n\t\t\t\t\t<p>Total waves count: {allWaves.length}</p>\n\t\t\t\t)}\n\n\t\t\t\t<p>All waves:</p>\n\t\t\t\t<div style={{ marginBottom: \"32px\" }}>\n\t\t\t\t\t{allWaves.map((wave, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tbackgroundColor: \"OldLace\",\n\t\t\t\t\t\t\t\t\tmarginTop: \"16px\",\n\t\t\t\t\t\t\t\t\tpadding: \"8px\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div>Address: {wave.address}</div>\n\t\t\t\t\t\t\t\t<div>Time: {wave.timestamp.toString()}</div>\n\t\t\t\t\t\t\t\t<div>Message: {wave.message}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}