{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","waveText","setWaveText","mining","setMining","contractAddress","contractABI","WavePortalContract","abi","ethereum","window","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","useEffect","a","checkIfWalletIsConnected","getAllWaves","initialCheck","onNewWave","from","timestamp","message","console","warn","prevState","address","Date","on","off","log","request","method","accounts","length","account","connectWallet","alert","waves","wavesCleaned","forEach","wave","push","waver","gasLimit","waveTxn","hash","wait","className","type","value","onChange","event","target","style","width","marginLeft","marginTop","marginBottom","borderLeft","borderTop","borderRight","disabled","onClick","map","index","backgroundColor","padding","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b411cc14.chunk.js","sourcesContent":["import { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport WavePortalContract from \"./utils/WavePortal.json\";\n\nfunction App() {\n\tconst [currentAccount, setCurrentAccount] = useState(\"\");\n\tconst [allWaves, setAllWaves] = useState([]);\n\tconst [waveText, setWaveText] = useState(\"\");\n\tconst [mining, setMining] = useState(false);\n\tconst contractAddress = \"0xd63aBff74143f24f5a7A2156c205c36D94dCc7c5\";\n\tconst contractABI = WavePortalContract.abi;\n\tconst { ethereum } = window;\n\tconst provider = ethereum && new ethers.providers.Web3Provider(ethereum);\n\tconst signer = ethereum && provider.getSigner();\n\tconst wavePortalContract =\n\t\tethereum && new ethers.Contract(contractAddress, contractABI, signer);\n\n\tuseEffect(() => {\n\t\tconst initialCheck = async () => {\n\t\t\tawait checkIfWalletIsConnected();\n\t\t\tawait getAllWaves();\n\t\t};\n\n\t\tinitialCheck();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tlet wavePortalContract;\n\n\t\tconst onNewWave = (from, timestamp, message) => {\n\t\t\tconsole.warn(\"NewWave\", from, timestamp, message);\n\t\t\tsetAllWaves((prevState) => [\n\t\t\t\t...prevState,\n\t\t\t\t{\n\t\t\t\t\taddress: from,\n\t\t\t\t\ttimestamp: new Date(timestamp * 1000),\n\t\t\t\t\tmessage: message,\n\t\t\t\t},\n\t\t\t]);\n\t\t};\n\n\t\tif (window.ethereum) {\n\t\t\twavePortalContract = new ethers.Contract(\n\t\t\t\tcontractAddress,\n\t\t\t\tcontractABI,\n\t\t\t\tsigner\n\t\t\t);\n\t\t\twavePortalContract.on(\"NewWave\", onNewWave);\n\t\t}\n\n\t\treturn () => {\n\t\t\tif (wavePortalContract) {\n\t\t\t\twavePortalContract.off(\"NewWave\", onNewWave);\n\t\t\t}\n\t\t};\n\t}, []);\n\n\tconst checkIfWalletIsConnected = async () => {\n\t\ttry {\n\t\t\tif (!ethereum) {\n\t\t\t\tconsole.log(\"Make sure you have metamask!\");\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tconsole.log(\"We have the ethereum object\", ethereum);\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n\t\t\tif (accounts.length !== 0) {\n\t\t\t\tconst account = accounts[0];\n\t\t\t\tconsole.log(\"Found an authorized account:\", account);\n\t\t\t\tsetCurrentAccount(account);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"No authorized account found\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tif (!ethereum) {\n\t\t\t\talert(\"Get MetaMask!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({\n\t\t\t\tmethod: \"eth_requestAccounts\",\n\t\t\t});\n\n\t\t\tconsole.log(\"Connected\", accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst getAllWaves = async () => {\n\t\ttry {\n\t\t\tif (ethereum) {\n\t\t\t\tconst waves = await wavePortalContract.getAllWaves();\n\n\t\t\t\t/*\n\t\t\t\t * We only need address, timestamp, and message in our UI so let's\n\t\t\t\t * pick those out\n\t\t\t\t */\n\t\t\t\tlet wavesCleaned = [];\n\t\t\t\twaves.forEach((wave) => {\n\t\t\t\t\twavesCleaned.push({\n\t\t\t\t\t\taddress: wave.waver,\n\t\t\t\t\t\ttimestamp: new Date(wave.timestamp * 1000),\n\t\t\t\t\t\tmessage: wave.message,\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t/*\n\t\t\t\t * Store our data in React State\n\t\t\t\t */\n\t\t\t\tsetAllWaves(wavesCleaned);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst wave = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\tsetMining(true);\n\t\t\t\tconst waveTxn = await wavePortalContract.wave(waveText, {\n\t\t\t\t\tgasLimit: 300000,\n\t\t\t\t});\n\t\t\t\tconsole.log(\"Mining...\", waveTxn.hash);\n\t\t\t\tsetWaveText(\"\");\n\n\t\t\t\tawait waveTxn.wait();\n\t\t\t\tconsole.log(\"Mined -- \", waveTxn.hash);\n\t\t\t\tsetMining(false);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tsetMining(false);\n\t\t\tsetWaveText(\"\");\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst handleTextChange = (event) => setWaveText(event.target.value);\n\n\treturn (\n\t\t<div className=\"mainContainer\">\n\t\t\t<div className=\"dataContainer\">\n\t\t\t\t<div className=\"header\">ðŸ‘‹ Hey there, its simple Wave Portal!</div>\n\n\t\t\t\t<div className=\"bio\">\n\t\t\t\t\tHello I am Bartek. Connect your Ethereum wallet and wave at me!\n\t\t\t\t</div>\n\n\t\t\t\t<label>\n\t\t\t\t\tType your name:\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={waveText}\n\t\t\t\t\t\tonChange={handleTextChange}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: \"50%\",\n\t\t\t\t\t\t\tmarginLeft: \"8px\",\n\t\t\t\t\t\t\tmarginTop: \"24px\",\n\t\t\t\t\t\t\tmarginBottom: \"12px\",\n\t\t\t\t\t\t\tborderLeft: \"0px\",\n\t\t\t\t\t\t\tborderTop: \"0px\",\n\t\t\t\t\t\t\tborderRight: \"0px\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"waveButton\"\n\t\t\t\t\tdisabled={waveText.length < 2}\n\t\t\t\t\tonClick={wave}\n\t\t\t\t>\n\t\t\t\t\t{ethereum ? \"Wave at Me\" : \"Please install metamask in browser\"}\n\t\t\t\t</button>\n\n\t\t\t\t{!currentAccount && (\n\t\t\t\t\t<button className=\"waveButton\" onClick={connectWallet}>\n\t\t\t\t\t\tConnect Wallet\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\n\t\t\t\t{mining ? (\n\t\t\t\t\t<p>Total waves: Mining... Please wait</p>\n\t\t\t\t) : (\n\t\t\t\t\t<p>Total waves count: {allWaves.length}</p>\n\t\t\t\t)}\n\n\t\t\t\t<p>All waves:</p>\n\t\t\t\t{!currentAccount && <p>Connect Your wallet to see who else waved!</p>}\n\t\t\t\t<div style={{ marginBottom: \"32px\" }}>\n\t\t\t\t\t{allWaves.map((wave, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tbackgroundColor: \"OldLace\",\n\t\t\t\t\t\t\t\t\tmarginTop: \"16px\",\n\t\t\t\t\t\t\t\t\tpadding: \"8px\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div>Address: {wave.address}</div>\n\t\t\t\t\t\t\t\t<div>Time: {wave.timestamp.toString()}</div>\n\t\t\t\t\t\t\t\t<div>Message: {wave.message}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}